<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="400" height="300" addedToStage="addToStageHandler(event)" color="#000000">
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	<fx:Script>
		<![CDATA[
			import event.UIEvent;
			
			import flash.utils.getQualifiedClassName;
			import flash.utils.getTimer;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.collections.IList;
			import mx.collections.XMLListCollection;
			import mx.controls.listClasses.ListItemRenderer;
			
			import spark.events.IndexChangeEvent;
			import spark.modules.Module;
			
			import view.item.RenderItemIcon;
			
			private var _container:DisplayObjectContainer;
			
			protected function addToStageHandler(event:Event):void
			{
				App.layerManager.layerPanel = this;
				if(App.rslLoaded)initData();
				else App.addEventListener(UIEvent.RSL_LOAD_COMPLETE,initData);
			}
			
			private function initData(evt:Event=null):void
			{
				initEvent();
			}
			
			private function initEvent():void
			{
				App.addEventListener(UIEvent.STAGE_SELECT_UPDATE,selectsUpdateHandler);
			}
			
			public function setChild(container:DisplayObjectContainer):void
			{
				_container = container;
				updateList();
			}
			
			private function updateList():void
			{
				var count:int;
				var seletcedArr:Array = [];
				var dp:ArrayCollection = new ArrayCollection();
				for (var i:int = 0; i < _container.numChildren; i++) 
				{
					var item:HotRectControl = _container.getChildAt(i) as HotRectControl;
					if(item)
					{
						dp.addItem({"label": i + ":" + getQualifiedClassName(item.content),"type":1,"info":item.uiInfo,"icon":RenderItemIcon});
						if(item.selected)seletcedArr.push(count);
						count ++;
					}
				}
				itemList.dataProvider = dp;
				itemList.selectedIndices = seletcedArr;
			}
			
			public function getContainer():DisplayObjectContainer
			{
				return _container;
			}
			
			protected function upClickHandler(event:MouseEvent):void
			{
				upHandler();
			}
			
			protected function downClickHandler(event:MouseEvent):void
			{
				downHandler();
			}
			
			protected function delClickHandler(event:MouseEvent):void
			{
				delHandler();
			}
			
			//上下顶底删
			public function upHandler():void
			{
				if(!canHandle)return;
				for (var i:int = 0; i < App.hotRectManager.selectedRects.length; i++) 
				{
					var index:int = _container.getChildIndex(App.hotRectManager.selectedRects[i]);
					if(index < _container.numChildren - 1)
					{
						_container.swapChildrenAt(index,index + 1);
					}
				}
				setChild(_container);
			}
			
			public function downHandler():void
			{
				if(!canHandle)return;
				for (var i:int = 0; i < App.hotRectManager.selectedRects.length; i++) 
				{
					var index:int = _container.getChildIndex(App.hotRectManager.selectedRects[i]);
					if(index > 0)
					{
						_container.swapChildrenAt(index,index - 1);
					}
				}
				setChild(_container);
			}
			
			public function topHandler():void
			{
				if(!canHandle)return;
				if(App.hotRectManager.selectedRects.length > 1)
				{
					trace("顶底只能对一个元素有效");
					return;
				}
				for (var i:int = 0; i < App.hotRectManager.selectedRects.length; i++) 
				{
					var index:int = _container.getChildIndex(App.hotRectManager.selectedRects[i]);
					_container.swapChildrenAt(index,_container.numChildren - 1);
				}
				setChild(_container);
			}
			
			public function bottomHandler():void
			{
				if(!canHandle)return;
				if(App.hotRectManager.selectedRects.length > 1)
				{
					trace("顶底只能对一个元素有效");
					return;
				}
				for (var i:int = 0; i < App.hotRectManager.selectedRects.length; i++) 
				{
					var index:int = _container.getChildIndex(App.hotRectManager.selectedRects[i]);
					_container.swapChildrenAt(index,0);
				}
				setChild(_container);
			}
			
			public function delHandler():void
			{
				if(!canHandle)return;
				for (var i:int = 0; i < App.hotRectManager.selectedRects.length; i++) 
				{
					App.hotRectManager.selectedRects[i].destory();
				}
				App.hotRectManager.selectedRects = new Vector.<HotRectControl>();
				
				setChild(_container);
			}
			
			private function get canHandle():Boolean
			{
				return (App.hotRectManager.selectedRects.length > 0) && _container;
			}
			
			private function selectionChangingHandler():void 
			{
				App.dispathEvent(new UIEvent(UIEvent.LAYERS_SELECT_UPDATE,itemList.selectedIndices));
			}
			
			private function selectsUpdateHandler(evt:UIEvent):void
			{
				var time:Number = getTimer();
				
				var arr:Array = evt.data as Array;
				itemList.selectedIndices = arr;
				
				trace("层级面板耗时：",getTimer() - time);
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<s:Group id="layersGroup" width="100%" height="90%">
		<mx:List id="itemList" width="100%" height="100%" color="#000000" contentBackgroundColor="#FFFFFF"
			itemRenderer="view.item.LayerItemRender"
			allowMultipleSelection="true"
			iconField="icon" labelField="label"
			change="selectionChangingHandler();"
			>
		</mx:List>
	</s:Group>
	<s:Group width="100%" height="20%">
		<s:layout>
			<s:HorizontalLayout/>
		</s:layout>
		<s:Image x="10" y="241" source="@Embed('assets/systemIcons/begin.gif')" click="upClickHandler(event)" toolTip="上移（Ctrl + 上）"/>
		<s:Image x="31" y="241" source="@Embed('assets/systemIcons/right.gif')" click="downClickHandler(event)" toolTip="上移（Ctrl + 下）"/>
		<s:Image x="53" y="241" source="@Embed('assets/systemIcons/rungc_co.gif')" click="delClickHandler(event)" toolTip="删除（DELETE）"/>
	</s:Group>
</s:Panel>
