<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="400" height="300"
		 addedToStage="addToStageHandler(event)"
		 >
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	<fx:Script>
		<![CDATA[
			import event.UIEvent;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			
			import uidata.UIClassInfo;
			import uidata.vo.HelpClassVo;
			protected function upClickHandler(event:MouseEvent):void
			{
				var classInfo:UIClassInfo = App.classInfoList.getClassInfo(App.currentClass);
				if(classInfo)
				{
					var vec:Vector.<HelpClassVo> = classInfo.helpClassList.slice(0); 
					var nowClass:String = itemList.selectedItem.value.className;
					var index:int = classInfo.getHelpClassIndex(nowClass); 
					if(index >= vec.length - 1)
					{
						return;
					}else
					{
						var temp:HelpClassVo = vec[index];
						vec[index] = vec[index + 1];
						vec[index + 1] = temp;
					}
					classInfo.helpClassList = vec;
					
					setDataProvider(classInfo,index + 1);
				}
			}
			
			protected function downClickHandler(event:MouseEvent):void
			{
				var classInfo:UIClassInfo = App.classInfoList.getClassInfo(App.currentClass);
				if(classInfo)
				{
					var vec:Vector.<HelpClassVo> = classInfo.helpClassList.slice(0); 
					var nowClass:String = itemList.selectedItem.value.className;
					var index:int = classInfo.getHelpClassIndex(nowClass); 
					if(index <= 0)
					{
						return;
					}else
					{
						var temp:HelpClassVo = vec[index];
						vec[index] = vec[index - 1];
						vec[index - 1] = temp;
					}
					classInfo.helpClassList = vec;
					
					setDataProvider(classInfo,index - 1);
				}
			}
			
			protected function delClickHandler(event:MouseEvent):void
			{
				var classInfo:UIClassInfo = App.classInfoList.getClassInfo(App.currentClass);
				if(classInfo)
				{
					if(classInfo.className == itemList.selectedItem.value)
					{
						Alert.show("类层级中不能删除自己");
						return;
					}
					
					var vec:Vector.<HelpClassVo> = classInfo.helpClassList.slice(0); 
					var nowClass:String = itemList.selectedItem.value.className;
					var index:int = classInfo.getHelpClassIndex(nowClass); 
					if(index < 0)
					{
						return;
					}else
					{
						vec.splice(index,1);
					}
					classInfo.helpClassList = vec;
					
					setDataProvider(classInfo);
				}
			}
			
			private function visibelChangeHandler(evt:MouseEvent):void
			{
				if(!itemList.selectedItem || !itemList.selectedItem.value)return;
				var helpVo:HelpClassVo = itemList.selectedItem.value as HelpClassVo;
				if(!helpVo)return;
				helpVo.visible = !helpVo.visible;
				
				updateDataProvier();
				
				App.dispathEvent(new UIEvent(UIEvent.HELP_CLASS_SELECTED,helpVo.className));
			}
			
			protected function addToStageHandler(event:Event):void
			{
				initEvent();
			}
			
			private function initEvent():void
			{
				App.addEventListener(UIEvent.SELECT_A_CLASS,onSelectAClassHandler,false,1);	
				App.addEventListener(UIEvent.HELP_CLASS_UPDATE,onHelpClassUpdateHandler);
			}
			
			private function onSelectAClassHandler(evt:UIEvent):void
			{
				onHelpClassUpdateHandler(null);
			}
			
			private function onHelpClassUpdateHandler(evt:UIEvent):void
			{
				if(App.currentClass)
				{
					var classInfo:UIClassInfo = App.classInfoList.getClassInfo(App.currentClass);
					if(classInfo)
					{
						var index:int = (evt == null) ? classInfo.getHelpClassIndex(App.currentClass) : (classInfo.helpClassList.length - 1);
						setDataProvider(classInfo,index);
					}
				}
			}
			
			private function setDataProvider(classInfo:UIClassInfo,index:int = -1):void
			{
				var arrCon:ArrayCollection = new ArrayCollection();
				for (var i:int = 0; i < classInfo.helpClassList.length; i++) 
				{
					arrCon.addItem({"label":i + ":" + getItemLabel(classInfo.helpClassList[i]),"value":classInfo.helpClassList[i]});
				}
				itemList.dataProvider = arrCon;
				if(index != -1)itemList.selectedIndex = index;
				else itemList.selectedIndex = arrCon.length - 1;
				
				selectionChangingHandler();
			}
			
			private function updateDataProvier():void
			{
				var arrCon:ArrayCollection = itemList.dataProvider as ArrayCollection;
				for (var i:int = 0; i < arrCon.length; i++) 
				{
					var obj:Object = arrCon.getItemAt(i); 
					obj.label = i + ":" + getItemLabel(obj.value);
				}
				var index:int = itemList.selectedIndex;
				itemList.dataProvider = arrCon;
				itemList.selectedIndex = index;
			}
			
			private function getItemLabel(helpVo:HelpClassVo):String
			{
				var result:String = helpVo.className;
				if(!helpVo.visible)result += "【已隐藏】";
				if(helpVo.locked)result += "【已锁定】";
				return result;
			}
			
			private function selectionChangingHandler():void 
			{
				if(!itemList.selectedItem)
				{
					Alert.show("请选择一个层级,按下ctrl键会取消选择");
					return;
				}
				var helpVo:HelpClassVo = itemList.selectedItem.value as HelpClassVo;
				if(helpVo)
				{
					App.dispathEvent(new UIEvent(UIEvent.HELP_CLASS_SELECTED,helpVo.className));
				}else
				{
					App.log.error("辅助类",helpVo.className,"为null");
				}
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	
	<s:Group id="layersGroup" width="100%" height="90%">
		<mx:List id="itemList" width="100%" height="100%" color="#000000" contentBackgroundColor="#FFFFFF"
				 itemRenderer="view.item.LayerItemRender"
				 allowMultipleSelection="true"
				 iconField="icon" labelField="label"
				 change="selectionChangingHandler();"
				 >
		</mx:List>
	</s:Group>
	<s:Group width="100%" height="20%">
		<s:layout>
			<s:HorizontalLayout/>
		</s:layout>
		<s:Image x="10" y="241" buttonMode="true" source="@Embed('assets/systemIcons/up.png')" click="upClickHandler(event)" toolTip="上移"/>
		<s:Image x="31" y="241" buttonMode="true" source="@Embed('assets/systemIcons/down.png')" click="downClickHandler(event)" toolTip="上移"/>
		<s:Image x="53" y="241" buttonMode="true" source="@Embed('assets/systemIcons/rungc_co.gif')" click="delClickHandler(event)" toolTip="删除"/>
		<s:Image x="53" y="241" buttonMode="true" source="@Embed('assets/view_16.png')" click="visibelChangeHandler(event)" toolTip="隐藏"/>
	</s:Group>
	
</s:Panel>
