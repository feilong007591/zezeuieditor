<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="400" height="300" addedToStage="panel1_addedToStageHandler(event)"
		 backgroundColor="0xcccccc" chromeColor="#CFCFCF" dragEnter="group1_dragEnterHandler(event)"
		 dragExit="onDragExitHandler(event)" resize="panel1_resizeHandler(event)">
	<fx:Script>
		<![CDATA[
			import avmplus.getQualifiedClassName;
			
			import data.Direction;
			
			import event.UIEvent;
			
			import flash.utils.describeType;
			
			import ghostcat.ui.CursorSprite;
			
			import manager.LayerManager;
			
			import mhqy.ui.label.MAssetLabel;
			
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.events.DragEvent;
			import mx.events.ResizeEvent;
			
			import spark.core.IEditableText;
			
			import uidata.UIClassInfo;
			import uidata.UIElementBaseInfo;
			
			import utils.UIElementCreator;
			
			private var _currentClass:String;
			
			//容器
			private var _uiContainer:UIComponent;
			private var _hitContainer:UIComponent;//选择热区辅助
			private var _uiMask:UIComponent;
			
			private var _direction:int = 0;
			
			//拖动区域
			private var _oldX:Number;
			private var _oldY:Number;
			
			public function set currentClass(value:String):void
			{
				_currentClass = value;
				_uiContainer.graphics.clear();
				if(value)
				{
					_uiContainer.graphics.beginFill(0xffffff,1);
					_uiContainer.graphics.drawRect(0,0,3000,3000);
					_uiContainer.graphics.endFill();
				}
			}
			
			protected function panel1_addedToStageHandler(event:Event):void
			{
				App.layerManager.stagePanel = this;
				
				_uiMask = new UIComponent();
				addElement(_uiMask);
				_uiMask.graphics.beginFill(0,0);
				_uiMask.graphics.drawRect(0,0,this.width,this.height);
				_uiMask.graphics.endFill();
					
				_uiContainer = new UIComponent();
				addElement(_uiContainer);
				_uiContainer.mask = _uiMask;
				_hitContainer = new UIComponent();
				addElement(_hitContainer);
				
//				_uiContainer.addChild(new CursorSprite());
				
				initEvent();
			}
			
			private function initEvent():void
			{
				this.addEventListener(MouseEvent.MOUSE_DOWN, unSelectedHotRectHandler);
				this.addEventListener(KeyboardEvent.KEY_DOWN,onKeyDownHandler);
				stage.addEventListener(KeyboardEvent.KEY_UP,onKeyUpHandler);	
				this.addEventListener(MouseEvent.RIGHT_MOUSE_DOWN,onRightDownHandler);
				stage.addEventListener(MouseEvent.RIGHT_MOUSE_UP,onRightUpHandler);
				App.addEventListener(UIEvent.LAYERS_SELECT_UPDATE,onSelectUpdateHandler);
				App.addEventListener(UIEvent.SELECT_A_CLASS,selectAClassHandler);
				
				//scales
				App.addEventListener(UIEvent.STAGE_ENLARGE,enlargeHandler);
				App.addEventListener(UIEvent.STAGE_LESSON,lessonHandler);
				App.addEventListener(UIEvent.STAGE_NO_SCALE,noScaleHandler);
			}
			
			protected function onKeyDownHandler(evt:KeyboardEvent):void
			{
				switch(evt.keyCode)
				{
					case Keyboard.A:
					case Keyboard.LEFT:
						_direction = _direction | Direction.LEFT;
						break;
					case Keyboard.D:
					case Keyboard.RIGHT:
						_direction = _direction | Direction.RIGHT;
						break;
					case Keyboard.W:
					case Keyboard.UP:
						if(evt.ctrlKey && evt.shiftKey)
						{
							App.layerManager.layerHandler(LayerManager.TOP);
						}else if(evt.ctrlKey)
						{
							App.layerManager.layerHandler(LayerManager.UP);
						}else{
							_direction = _direction | Direction.UP;
						}
						break;
					case Keyboard.S:
					case Keyboard.DOWN:
						if(evt.ctrlKey && evt.shiftKey)
						{
							App.layerManager.layerHandler(LayerManager.BOTTOM);
						}else if(evt.ctrlKey)
						{
							if(evt.keyCode == Keyboard.S)App.xmlParser.save();
							else if(evt.keyCode == Keyboard.DOWN)App.layerManager.layerHandler(LayerManager.DOWN);
						}else{
							_direction = _direction | Direction.DOWN;
						}
						break;
					case Keyboard.DELETE:
						App.layerManager.layerHandler(LayerManager.DEL);
						break;
					case Keyboard.NUMBER_1:
						if(evt.ctrlKey)App.dispathEvent(new UIEvent(UIEvent.STAGE_NO_SCALE));
						break;
					case Keyboard.EQUAL:
						if(evt.ctrlKey)App.dispathEvent(new UIEvent(UIEvent.STAGE_ENLARGE));
						break;
					case Keyboard.MINUS:
						if(evt.ctrlKey)App.dispathEvent(new UIEvent(UIEvent.STAGE_LESSON));
						break;
				}
				if(_direction != 0)
				{
					this.addEventListener(Event.ENTER_FRAME,onETHandler);
				}
			}
			
			protected function onKeyUpHandler(evt:KeyboardEvent):void
			{
				switch(evt.keyCode)
				{
					case Keyboard.A:
					case Keyboard.LEFT:
						_direction = _direction & 0;
						break;
					case Keyboard.D:
					case Keyboard.RIGHT:
						_direction = _direction & 0;
						break;
					case Keyboard.W:
					case Keyboard.UP:
						_direction = _direction & 0;	
						break;
					case Keyboard.S:
					case Keyboard.DOWN:
						_direction = _direction & 0;	
						break;
				}
				if(_direction == 0)
				{
					this.removeEventListener(Event.ENTER_FRAME,onETHandler);
				}
			}
			
			protected function onETHandler(event:Event):void
			{
				App.hotRectManager.moveDir(_direction);	
			}
			
			private function unSelectedHotRectHandler(evt:MouseEvent):void 
			{
				stage.focus = this;
				if(App.hotRectManager.selectedRects.length > 0)
				{
					App.hotRectManager.unSelectAll();
					App.dispathEvent(new UIEvent(UIEvent.STAGE_SELECT_UPDATE,[]));
				}
				
				_oldX = _uiContainer.mouseX * _uiContainer.scaleX;
				_oldY = _uiContainer.mouseY * _uiContainer.scaleY;
				
				stage.addEventListener(MouseEvent.MOUSE_MOVE,onMouseMoveHandler);
				stage.addEventListener(MouseEvent.MOUSE_UP,onMouseUpHandler);
			}
			
			protected function group1_dragEnterHandler(event:DragEvent):void
			{
				trace(event);
			}
			
			protected function onDragExitHandler(evt:DragEvent):void
			{
				if(!_currentClass)
				{
					Alert.show("请先选择或新建一个类");
					return;
				}
				var hotRect:HotRectControl = new HotRectControl();
				hotRect.selctedHander = updateLate;
				_uiContainer.addChild(hotRect);
				
				var info:UIElementBaseInfo = App.dragVo.classVo.info;
				var uiInfo:UIElementBaseInfo = info.clone(UIElementCreator.creatInfo(info.type));
				uiInfo.x = _uiContainer.mouseX;
				uiInfo.y = _uiContainer.mouseY;
				hotRect.uiInfo = uiInfo;
				
				App.layerManager.layerPanel.setChild(_uiContainer);
				stage.focus = this;
			}
			
			private function onSelectUpdateHandler(evt:UIEvent):void
			{
				var arr:Array = evt.data as Array;
				for (var i:int = 0; i < _uiContainer.numChildren; i++) 
				{
					var item:HotRectControl = _uiContainer.getChildAt(i) as HotRectControl;
					var bool:Boolean = false;
					for (var j:int = 0; j < arr.length; j++) 
					{
						if(i == arr[j])
						{
							bool = true;
							break;
						}
					}
					item.selected = bool;
				}
			}
			
			private var _updateLayerFlag:Boolean = false;
			
			private function updateLate():void
			{
				if(_updateLayerFlag == true)return;
				_updateLayerFlag = true;
				callLater(updateLayerSelects);
			}
			
			private function updateLayerSelects():void
			{
				_updateLayerFlag = false;
				var arr:Array = [];
				for (var i:int = 0; i < _uiContainer.numChildren; i++) 
				{
					var item:HotRectControl = _uiContainer.getChildAt(i) as HotRectControl;
					if(item.selected)arr.push(i);
				}
				App.dispathEvent(new UIEvent(UIEvent.STAGE_SELECT_UPDATE,arr));
			}
			
			protected function onMouseUpHandler(event:MouseEvent):void
			{
				stage.removeEventListener(MouseEvent.MOUSE_MOVE,onMouseMoveHandler);
				stage.removeEventListener(MouseEvent.MOUSE_UP,onMouseUpHandler);
				
				for (var i:int = 0; i < _uiContainer.numChildren; i++) 
				{
					var hotRect:HotRectControl = _uiContainer.getChildAt(i) as HotRectControl;
					if(hotRect)
					{
						if(hotRect.hitTestObject(_hitContainer))hotRect.selected = true;
					}
				}
				_hitContainer.graphics.clear();
			}
			
			protected function onMouseMoveHandler(event:MouseEvent):void
			{
				_hitContainer.graphics.clear();
				_hitContainer.graphics.lineStyle(1,0x00ff00,1);
				_hitContainer.graphics.drawRect(rect.x,rect.y,rect.width,rect.height);
				_hitContainer.graphics.endFill();
			}
			
			private function get rect():Rectangle
			{
				var nx:Number = _uiContainer.mouseX * _uiContainer.scaleX;
				var ny:Number = _uiContainer.mouseY * _uiContainer.scaleY;
				return new Rectangle(
					(_oldX < nx) ? _oldX : nx,
					(_oldY < ny) ? _oldY : ny,
					Math.abs(nx - _oldX),
					Math.abs(ny - _oldY)
					);
			}
			
			protected function onRightDownHandler(event:MouseEvent):void
			{
				_uiContainer.startDrag(false);
				Mouse.cursor = MouseCursor.HAND;
			}
			
			protected function onRightUpHandler(event:MouseEvent):void
			{
				_uiContainer.stopDrag();
				Mouse.cursor = MouseCursor.AUTO;
				_hitContainer.x = _uiContainer.x;
				_hitContainer.y = _uiContainer.y;
			}
			
			protected function panel1_resizeHandler(event:ResizeEvent):void
			{
				if(_uiMask)
				{
					_uiMask.graphics.clear();
					_uiMask.graphics.beginFill(0,0);
					_uiMask.graphics.drawRect(0,0,this.width,this.height);
					_uiMask.graphics.endFill();
				}
			}
			
			private function selectAClassHandler(evt:UIEvent):void
			{
				if(_currentClass == evt.data.toString())return;
				save();
				clear();
				currentClass = evt.data.toString();
				title = "舞台" + "    class:   [" + evt.data + "]";
				//实例化
				var classInfo:UIClassInfo = App.classInfoList.getClassInfo(_currentClass);
				if(!classInfo)return;
				for (var i:int = 0; i < classInfo.childrenInfo.length; i++) 
				{
					var hotRect:HotRectControl = new HotRectControl();
					hotRect.selctedHander = updateLate;
					_uiContainer.addChild(hotRect);
					
					hotRect.uiInfo = classInfo.childrenInfo[i];
				}
				App.layerManager.layerPanel.setChild(_uiContainer);
				stage.focus = this;
			}
			
			private function clear():void
			{
				while(_uiContainer.numChildren)
				{
					_uiContainer.removeChildAt(0);
				}
			}
			
			public function save():void
			{
				if(!_currentClass)return;
				var info:UIClassInfo = App.classInfoList.getClassInfo(_currentClass);
				if(!info)return;
				info.childrenInfo = new Vector.<UIElementBaseInfo>();
				var len:int = _uiContainer.numChildren;
				for (var j:int = 0; j < len; j++) 
				{
					var hotRect:HotRectControl = _uiContainer.getChildAt(j) as HotRectControl;
					if(hotRect && hotRect.uiInfo)
					{
						info.childrenInfo.push(hotRect.uiInfo);
					}
				}
			}
			
			private function enlargeHandler(evt:UIEvent):void
			{
				_uiContainer.scaleX += 0.2;
				_uiContainer.scaleY += 0.2;
			}
			private function lessonHandler(evt:UIEvent):void
			{
				_uiContainer.scaleX -= 0.2;
				_uiContainer.scaleY -= 0.2;
			}
			private function noScaleHandler(evt:UIEvent):void
			{
				_uiContainer.scaleX = _uiContainer.scaleY = 1;
//				_uiContainer.x = _uiContainer.y = 0;
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<s:Scroller width="100%" height="100%">
		<s:Group> 
		</s:Group>        
	</s:Scroller>
</s:Panel>
