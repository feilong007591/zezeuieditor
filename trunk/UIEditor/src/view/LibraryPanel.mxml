<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%"
		 addedToStage="addToStage(event)" xmlns:view="view.*"
		 >
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import data.Config;
			import data.vo.SwfVo;
			
			import event.UIEvent;
			
			import flash.utils.setTimeout;
			
			import ghostcat.debug.Debug;
			
			import help.HelpLoader;
			import help.ResourceTxtLoader;
			
			import manager.LogManager;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.DragSource;
			import mx.events.DragEvent;
			import mx.events.ListEvent;
			import mx.managers.DragManager;
			
			import nochump.util.zip.ZipEntry;
			import nochump.util.zip.ZipFile;
			
			import spark.components.Image;
			
			import uidata.UIData;
			import uidata.UIElementBitmapInfo;
			import uidata.vo.UIClassVo;
			
			import utils.GetSwfAllClass;
			
			private const NODE:String = "node_item";
			
			protected var loadCount:int = 0;
			/**swf文件列表*/
			protected var swfVec:Vector.<SwfVo> = new Vector.<SwfVo>();
			/**外部图片名列表*/
			protected var outsidePics:Vector.<String> = new Vector.<String>(); 
			
			protected var loaded:Boolean = false;
			
			protected function addToStage(event:Event):void
			{
				App.currentDomain = ApplicationDomain.currentDomain;
				if(App.rslLoaded)initData();
				else App.addEventListener(UIEvent.RSL_LOAD_COMPLETE,initData);
			}
			
			private function initData(evt:Event=null):void
			{
				loadAllSwf();
				loadOutsideImgs();
			}
			
			private function loadAllSwf():void
			{
				loadResource(Config.swfsPath,1);
			}
			
			private function loadOutsideImgs():void
			{
				for each (var url:String in Config.outsideImgPath) 
				{
					loadResource(url,2);
				}
				
//				loadResource(Config.outsideImgPath,2);
			}
			
			/**
			 * @param type 1:加载swf，swc   2：加载外部图片
			 */
			private function loadResource(path:String,type:int):void
			{
				var browserFile:File = new File(path);
				if(!browserFile.exists)
				{
					Alert.show(browserFile.nativePath + "目录不存在,请检查Config.xml");
					return;
				}
				var fileAry:Array = browserFile.getDirectoryListing();
				if(fileAry.length <= 0)
				{
					Alert.show(browserFile.nativePath + "目录无可加载内容");
					return;
				}
				var inputTypes1:Array = ["swf","swc"];
				var inputTypes2:Array = ["jpg","png","jpeg","gif"];
				
				for(var i:int=0;i<fileAry.length;i++)
				{
					var file:File = fileAry[i];
					var stream:FileStream = new FileStream();
					if(!file.extension)continue;
					if(type == 1 && inputTypes1.indexOf(file.extension) == -1)continue;
					if(type == 2)
					{
						if(inputTypes2.indexOf(file.extension) != -1)
						{
							outsidePics.push(file.url.substr(file.url.indexOf("img/")));
						}
						continue;
					}
					
					try
					{
						stream.open(file,FileMode.READ);
						var byte:ByteArray = new ByteArray();
						stream.readBytes(byte,0,stream.bytesAvailable);
					} 
					catch(error:Error) 
					{
						App.log.error(error.message);
					}
					
					var loader:HelpLoader = new HelpLoader();
//					var loaderContext:LoaderContext = new LoaderContext(false,ApplicationDomain.currentDomain);
					var loaderContext:LoaderContext = new LoaderContext(false,App.currentDomain);
				　　loaderContext.allowLoadBytesCodeExecution = true; 
					loader.contentLoaderInfo.addEventListener(Event.COMPLETE,loadCompleteHandler);
					loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR,onError);
					var dataByte:ByteArray;
					
					if(file.extension == "swf" || file.extension == "jpg" || file.extension == "png")
					{
						dataByte = byte;
					}else if(file.extension == "swc")
					{
						var zipFile:ZipFile = new ZipFile(byte);
						for(var j:int = 0; j < zipFile.entries.length; j++) {
							var entry:ZipEntry = zipFile.entries[j];
							if(entry.name.indexOf("swf") != -1)
							{
								dataByte = zipFile.getInput(entry);
							}
						}
					}
					loader.data = {"url":file.url,"name":file.name,"type":type}
					if(type == 2)
					{
						loader.data["name"] = file.url.substr(file.url.indexOf("img/"));
					}
					loader.loadBytes(dataByte,loaderContext);
					loadCount ++;
				}
			}
			
			protected function onError(evt:IOErrorEvent):void
			{
				App.log.error(evt.text);
			}
			
			private function loadCompleteHandler(evt:Event):void
			{
				trace("loadComplete",loadCount);
				
				var loaderInfo:LoaderInfo = evt.target as LoaderInfo;
				loaderInfo.loader.contentLoaderInfo.removeEventListener(Event.COMPLETE,loadCompleteHandler);
				var byteArray:ByteArray = loaderInfo.bytes;
				var itemName:String = HelpLoader(loaderInfo.loader).data["name"];
				switch(HelpLoader(loaderInfo.loader).data["type"])
				{
					case 1:
						var swfVo:SwfVo = new SwfVo();
						swfVo.loaderInfo = loaderInfo;
						swfVo.classAry = GetSwfAllClass.getSWFClassName(byteArray);
						swfVo.path = HelpLoader(loaderInfo.loader).data["url"];
						swfVo.name = itemName;
						swfVec.push(swfVo);
						break;
					case 2:
						try
						{
							App.outsideImages[itemName] = Bitmap(loaderInfo.content).bitmapData;	
						} 
						catch(error:Error) 
						{
							App.log.error(error.message);	
						}
						break;
				}
				
				
				loadCount --;
				if(loadCount <= 0)
				{
					loaded = true;
					App.dispathEvent(new UIEvent(UIEvent.RESOURCE_LOADED));
					showInitInfo();
					setData();
				}
			}
			
			private function showInitInfo():void
			{
				var content:String = "";
				content += "资源初始化完成："+swfVec.length+"个swf\n";
				for(var i:int = 0;i<swfVec.length-1;i++)
				{
					for(var j:int = i+1;j<swfVec.length;j++)
					{
						var swfVo1:SwfVo = swfVec[i];
						var swfVo2:SwfVo = swfVec[j];
						for(var m:int = 0;m<swfVo1.classAry.length;m++)
						{
							for(var n:int = 0;n<swfVo2.classAry.length;n++)
							{
								if(swfVo1.classAry[m] == swfVo2.classAry[n])
								{
									content += (swfVo1.name+" AND "+swfVo2.name+"存在同样的类名："+swfVo1.classAry[m]+"\n");
								}
							}
						}
					}
					content += "【" + swfVec[i].name + "】  ";
				}
//				App.log.echo(content);
			}
			
			public function setData():void
			{
				var i:int;
				var temp:ArrayCollection;
				//这里要用children或者categories关键字来指定某个结点的子结点，而且这两个关键字是不能改变的，它们被定义在tree的实现里面。
				var arrayData:ArrayCollection = new ArrayCollection();
				
				//UI元件
				var len:int = App.uiData.UIClassArr.length;
				temp = new ArrayCollection();
				for (i = 0; i < len; i++) 
				{
					var uiClassVo:UIClassVo = App.uiData.UIClassArr[i];
					temp.addItem({label:uiClassVo.describe,data:uiClassVo});
				}
				arrayData.addItem({label:"0-UI元件库",type:NODE,children:temp});
				
				//外部图片库
				temp = new ArrayCollection();
				arrayData.addItem({label:"1-外部图片库",type:NODE,children:temp});
				for (var k:int = 0; k < outsidePics.length; k++) 
				{
					temp.addItem({label:outsidePics[k],data:new UIClassVo(outsidePics[k],new UIElementBitmapInfo(outsidePics[k],true))});
				}
				
				//资源库
				temp = new ArrayCollection();
				for(i = 0;i<swfVec.length;i++)
				{
					var swfVo:SwfVo = swfVec[i];
					temp = new ArrayCollection();
					for(var j:int = 0;j<swfVo.classAry.length;j++)
					{
						temp.addItem({label:swfVo.classAry[j],data:new UIClassVo(swfVo.classAry[j],new UIElementBitmapInfo(swfVo.classAry[j]))});
					}
					temp.source.sortOn('label',Array.CASEINSENSITIVE);
					temp.refresh();
					arrayData.addItem({label:swfVo.name,type:NODE,children:temp});
				}
				arrayData.source.sortOn('label',Array.CASEINSENSITIVE);
				arrayData.refresh();
				libraryTree.dataProvider = arrayData;
			}
			
			protected function libraryTree_changeHandler(evt:ListEvent):void
			{
				var selectedNode:Object = Tree(evt.target).selectedItem;
				if(selectedNode.type != NODE)
				{
					App.dispathEvent(new UIEvent(UIEvent.LIBRARY_SELECT_ITEM,selectedNode.data));
				}
			}
			
			protected function dragStartHandler(evt:DragEvent):void
			{
				var tree:Tree = evt.currentTarget as Tree;
			}
			
			protected function libraryTree_dragCompleteHandler(event:DragEvent):void
			{
//				trace(event);
			}
			
			protected function refeshClickHandler(event:MouseEvent):void
			{
				if(!loaded)return;
				loaded = false; 
				App.dispathEvent(new UIEvent(UIEvent.REFRESH_RESOURCE));
				swfVec = new Vector.<SwfVo>();
				outsidePics= new Vector.<String>(); 
				App.currentDomain = new ApplicationDomain();
				setTimeout(initData,30);
				
				new ResourceTxtLoader(true);
			}
			
		]]>
	</fx:Script>
	<s:Group id="group1" width="100%" height="85">
		<view:LibraryItemPreView width="100%" height="100%">
		</view:LibraryItemPreView>
	</s:Group>
	<s:VGroup id="group2" x="0" y="85" width="100%" height="100%">
		<mx:Tree id="libraryTree" width="100%" height="100%"
				 change="libraryTree_changeHandler(event)" contentBackgroundColor="#FFFFFF"
				 allowDragSelection="false"
				 dragEnabled="true"
				 dragComplete="libraryTree_dragCompleteHandler(event)" 
				 dragStart="dragStartHandler(event)"
				 labelField="label">
		</mx:Tree>
		<s:Image source="assets/systemIcons/synced.gif" buttonMode="true" toolTip="点击刷新资源" click="refeshClickHandler(event)"/>
	</s:VGroup>
</s:Panel>
