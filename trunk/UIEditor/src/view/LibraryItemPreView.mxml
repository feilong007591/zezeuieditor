<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="400" height="300"
		 addedToStage="group1_addedToStageHandler(event)"
		 resize="group1_resizeHandler(event)"
		 >
	
	<fx:Script>
		<![CDATA[
			import event.UIEvent;
			
			import flash.utils.getDefinitionByName;
			import flash.utils.getQualifiedSuperclassName;
			
			import mx.controls.Image;
			import mx.core.DragSource;
			import mx.core.IUIComponent;
			import mx.core.UIComponent;
			import mx.events.ResizeEvent;
			import mx.managers.DragManager;
			
			import uidata.vo.UIClassVo;
			
			import utils.UIElementCreator;
			
			private var _itemCon:UIComponent;
			
			public var value:Object;
			private var _classVO:UIClassVo;
			
			protected function group1_addedToStageHandler(event:Event):void
			{
				initView();
				initEvent();				
			}
			
			private function initView():void
			{
				_itemCon = new UIComponent();
				addElementAt(_itemCon,0);
			}
			
			private function initEvent():void
			{
				App.addEventListener(UIEvent.LIBRARY_SELECT_ITEM,selectItemHandler);
				this.addEventListener(MouseEvent.MOUSE_DOWN,onMouseDownHandler);
				stage.addEventListener(MouseEvent.MOUSE_UP,onMouseUpHandler);
			}
			
			private function selectItemHandler(evt:UIEvent):void
			{
				while(_itemCon.numChildren){_itemCon.removeChildAt(0);}
				_classVO = evt.data as UIClassVo;
				var child:DisplayObject = UIElementCreator.createItem(_classVO.info);
				
				typeLabel.text = "";
				if(child)
				{
					_itemCon.addChild(child);
					setChildPos(child);
					if(child is MovieClip)
					{
						typeLabel.text = "MovieClip";
					}else if(child is Bitmap)
					{
						typeLabel.text = "BitmapData";
					}else
					{
						typeLabel.text = getQualifiedClassName(child);
					}
				}
			}
			
			private function setChildPos(child:DisplayObject):void
			{
				var cw:Number = child.width;
				var ch:Number = child.height;
				
//				if(child is Bitmap)
//				{
//					var bmd:BitmapData = (child as Bitmap).bitmapData;
//					if(bmd != null)
//					{
//						var maskColor:uint = 0xFFFFFF; 
//						var color:uint = 0xFF0000;  
//						var notRedBounds:Rectangle = bmd.getColorBoundsRect(maskColor, color, false);	
//						cw = notRedBounds.width;
//						ch = notRedBounds.height;
//					}
//				}
				
				var scaleValue:Number = 1;
				if(cw > this.width)
				{
					scaleValue = width / cw;
				}else if(ch > this.height)
				{
					scaleValue = height / ch;
				}
				child.scaleX = child.scaleY = scaleValue;
				child.x = (this.width - cw) / 2;
				child.y = (this.height - ch) / 2;
			}
			
			protected function group1_resizeHandler(event:ResizeEvent):void
			{
				//改变库元件显示大小
				
			}
			
			protected function onMouseDownHandler(evt:MouseEvent):void
			{
				if(!_classVO)return;
				var dragInitiator:IUIComponent = evt.currentTarget as IUIComponent;
				var dragSource:DragSource = new DragSource();
				dragSource.addData('value','value');
				
				value = _classVO;
				
				var image:Image = new Image();
				DragManager.doDrag(dragInitiator,dragSource,evt,image);
				
				while(_itemCon.numChildren){_itemCon.removeChildAt(0);}
				var child:DisplayObject = UIElementCreator.createItem(_classVO.info);
				if(child)
				{
					_itemCon.addChild(child);
					setChildPos(child);
				}
					
			}
			
			protected function onMouseUpHandler(event:MouseEvent):void
			{
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<s:Label id="typeLabel" height="20" width="100%" mouseEnabled="false"/>
</s:Group>
