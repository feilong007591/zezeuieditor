<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="400" height="300"
		 addedToStage="addToStageHandler(event)"
		 verticalCenter="0"
		 >
	
	<fx:Script>
		<![CDATA[
			import event.UIEvent;
			
			import mhqy.ui.UIType;
			
			import mx.collections.ArrayCollection;
			
			import spark.events.IndexChangeEvent;
			
			import uidata.UIElementBaseInfo;
			import uidata.UIElementBorderInfo;
			import uidata.vo.PropertyVo;
			
			import view.item.PropertyItemView;

			private var array:ArrayCollection;
			
			private var _itemsPool:Vector.<PropertyItemView>;
			
			protected function addToStageHandler(event:Event):void
			{
				App.addEventListener(UIEvent.RSL_LOAD_COMPLETE,rslLoadComplete);
			}
			
			private function rslLoadComplete(evt:Event):void
			{
				initData();
				initEvent();	
			}
			
			private function initEvent():void
			{
				App.addEventListener(UIEvent.LAYERS_SELECT_UPDATE,itemSelectHandler);
				App.addEventListener(UIEvent.STAGE_SELECT_UPDATE,itemSelectHandler);
			}
			
			private function itemSelectHandler(evt:UIEvent):void
			{
				var time:Number = getTimer();
				
				group.visible = false;
				if(App.hotRectManager.selectedRects.length == 0)
				{
					clearItems();
				}else if(App.hotRectManager.selectedRects.length == 1)
				{
					var rect:HotRectControl = App.hotRectManager.selectedRects[0];
					var vec:Vector.<PropertyVo> = rect.uiInfo.getPropertys();
					rect.uiInfo.addEventListener(UIEvent.INFO_UPDATE_STAGE,onInfoUpdateHandler);
					createPropertyItems(vec,rect.uiInfo);
					
					//可编辑状态
					group.visible = true;
					for(var i:int=0;i<array.length;i++){
						var obj:Object = array.getItemAt(i);
						if(obj.value == rect.uiInfo.type)
						{
							combobox.selectedIndex = i;
							break;
						}
					}
				}else
				{
					clearItems();
				}
				
				trace("属性面板耗时：",getTimer() - time);
			}
			
			private function initData():void
			{
				array = new ArrayCollection();
				array.addItem({label:"UI_BITMAP",value:UIType.BITMAP});
				array.addItem({label:"UI_BITMAPBTN",value:UIType.BITMAP_BTN});
				array.addItem({label:"UI_BORDER",value:UIType.BORDOR});
				array.addItem({label:"UI_BAR",value:UIType.BAR});
				array.addItem({label:"UI_BUTTON",value:UIType.BUTTON});
				array.addItem({label:"UI_TABBUTTON",value:UIType.TAB_BTN});
				array.addItem({label:"UI_LABEL",value:UIType.LABEL});
				
				array.addItem({label:"UI_CHECKBOX",value:UIType.CHECKBOX});
				array.addItem({label:"UI_RADIO_BTN",value:UIType.RADIO_BTN});
				array.addItem({label:"UI_LINE",value:UIType.LINE});
				array.addItem({label:"UI_PAGE_VIEW",value:UIType.PAGE_VIEW});
				array.addItem({label:"UI_COMBO_BOX",value:UIType.COMBO_BOX});
				
				combobox.dataProvider = array;
				combobox.selectedIndex = 0;
				
				_itemsPool = new Vector.<PropertyItemView>(20);
				for (var i:int = 0; i < _itemsPool.length; i++)
				{
					var item:PropertyItemView = new PropertyItemView();
					vGroup.addElement(item);
					_itemsPool[i] = item;
					item.visible = false;
					item.addEventListener(Event.CHANGE,onItemChangeHandler);
				}
			}
			
			protected function combobox_changeHandler(event:IndexChangeEvent):void
			{
				switch(combobox.selectedItem.value)
				{
					case UIType.BORDOR:
						var rect:HotRectControl = App.hotRectManager.selectedRects[0];
//						rect.uiInfo = new UIElementBorderInfo();
						var vec:Vector.<PropertyVo> = rect.uiInfo.getPropertys();
						createPropertyItems(vec,rect.uiInfo);
						break;
					case UIType.BAR:
						
						break;
				}
				
			}
			
			private function createPropertyItems(vec:Vector.<PropertyVo>,uiInfo:UIElementBaseInfo):void
			{
				var i:int
				for (i = 0; i < vec.length; i++) 
				{
					_itemsPool[i].setData(vec[i].proterty,vec[i],uiInfo);
					_itemsPool[i].visible = true;
				}
			}
			
			private function clearItems():void
			{
				for (var i:int = 0; i < _itemsPool.length; i++) 
				{
					_itemsPool[i].visible = false;
				}
			}
			
			protected function onItemChangeHandler(event:Event):void
			{
						
			}
			
			protected function onInfoUpdateHandler(event:Event):void
			{
				for (var i:int = 0; i < _itemsPool.length; i++) 
				{
					_itemsPool[i].updateView();
				}				
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<s:Scroller width="100%" height="100%">
		<s:Group width="100%" height="100%">
			<s:VGroup id="vGroup" y="38" width="100%" height="100%">
			</s:VGroup>
			<s:Group id="group" visible="false" width="100%" height="41">
				<s:ComboBox id="combobox" enabled="false" x="48" y="11" width="50%" change="combobox_changeHandler(event)"/>
				<s:Label x="15" y="18" text="type:"/>
			</s:Group>
		</s:Group>
	</s:Scroller>
</s:Panel>
